/* tslint:disable */
/* eslint-disable */
/**
 * NexTrip API
 * API for creating Metro Transit real-time departure information display (beta, subject to change)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Agency
 */
export interface Agency {
    /**
     * 
     * @type {number}
     * @memberof Agency
     */
    'agency_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Agency
     */
    'agency_name'?: string | null;
}
/**
 * 
 * @export
 * @interface AlertMessage
 */
export interface AlertMessage {
    /**
     * 
     * @type {boolean}
     * @memberof AlertMessage
     */
    'stop_closed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AlertMessage
     */
    'alert_text'?: string | null;
}
/**
 * 
 * @export
 * @interface Departure
 */
export interface Departure {
    /**
     * 
     * @type {boolean}
     * @memberof Departure
     */
    'actual'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Departure
     */
    'trip_id'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Departure
     */
    'stop_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Departure
     */
    'departure_text'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Departure
     */
    'departure_time'?: number;
    /**
     * 
     * @type {string}
     * @memberof Departure
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Departure
     */
    'gate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Departure
     */
    'route_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Departure
     */
    'route_short_name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Departure
     */
    'direction_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Departure
     */
    'direction_text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Departure
     */
    'terminal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Departure
     */
    'schedule_relationship'?: string | null;
}
/**
 * 
 * @export
 * @interface Direction
 */
export interface Direction {
    /**
     * 
     * @type {number}
     * @memberof Direction
     */
    'direction_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Direction
     */
    'direction_name'?: string | null;
}
/**
 * 
 * @export
 * @interface NexTripResult
 */
export interface NexTripResult {
    /**
     * 
     * @type {Array<Stop>}
     * @memberof NexTripResult
     */
    'stops'?: Array<Stop> | null;
    /**
     * 
     * @type {Array<AlertMessage>}
     * @memberof NexTripResult
     */
    'alerts'?: Array<AlertMessage> | null;
    /**
     * 
     * @type {Array<Departure>}
     * @memberof NexTripResult
     */
    'departures'?: Array<Departure> | null;
}
/**
 * 
 * @export
 * @interface Place
 */
export interface Place {
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    'place_code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Place
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface Route
 */
export interface Route {
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    'route_id'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Route
     */
    'agency_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    'route_label'?: string | null;
}
/**
 * 
 * @export
 * @interface Stop
 */
export interface Stop {
    /**
     * 
     * @type {number}
     * @memberof Stop
     */
    'stop_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Stop
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof Stop
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof Stop
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    'trip_id'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    'direction_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    'direction'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    'location_time'?: number;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    'route_id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    'terminal'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    'bearing'?: number;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    'odometer'?: number;
    /**
     * 
     * @type {number}
     * @memberof Vehicle
     */
    'speed'?: number;
}

/**
 * NexTripApi - axios parameter creator
 * @export
 */
export const NexTripApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2AgenciesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/nextripv2/agencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} routeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2DirectionsRouteIdGet: async (routeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeId' is not null or undefined
            assertParamExists('nextripv2DirectionsRouteIdGet', 'routeId', routeId)
            const localVarPath = `/nextripv2/directions/{route_id}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} routeId 
         * @param {number} directionId 
         * @param {string} placeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2RouteIdDirectionIdPlaceCodeGet: async (routeId: string, directionId: number, placeCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeId' is not null or undefined
            assertParamExists('nextripv2RouteIdDirectionIdPlaceCodeGet', 'routeId', routeId)
            // verify required parameter 'directionId' is not null or undefined
            assertParamExists('nextripv2RouteIdDirectionIdPlaceCodeGet', 'directionId', directionId)
            // verify required parameter 'placeCode' is not null or undefined
            assertParamExists('nextripv2RouteIdDirectionIdPlaceCodeGet', 'placeCode', placeCode)
            const localVarPath = `/nextripv2/{route_id}/{direction_id}/{place_code}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)))
                .replace(`{${"direction_id"}}`, encodeURIComponent(String(directionId)))
                .replace(`{${"place_code"}}`, encodeURIComponent(String(placeCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2RoutesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/nextripv2/routes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} stopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2StopIdGet: async (stopId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stopId' is not null or undefined
            assertParamExists('nextripv2StopIdGet', 'stopId', stopId)
            const localVarPath = `/nextripv2/{stop_id}`
                .replace(`{${"stop_id"}}`, encodeURIComponent(String(stopId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} routeId 
         * @param {number} directionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2StopsRouteIdDirectionIdGet: async (routeId: string, directionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeId' is not null or undefined
            assertParamExists('nextripv2StopsRouteIdDirectionIdGet', 'routeId', routeId)
            // verify required parameter 'directionId' is not null or undefined
            assertParamExists('nextripv2StopsRouteIdDirectionIdGet', 'directionId', directionId)
            const localVarPath = `/nextripv2/stops/{route_id}/{direction_id}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)))
                .replace(`{${"direction_id"}}`, encodeURIComponent(String(directionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} routeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2VehiclesRouteIdGet: async (routeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeId' is not null or undefined
            assertParamExists('nextripv2VehiclesRouteIdGet', 'routeId', routeId)
            const localVarPath = `/nextripv2/vehicles/{route_id}`
                .replace(`{${"route_id"}}`, encodeURIComponent(String(routeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NexTripApi - functional programming interface
 * @export
 */
export const NexTripApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NexTripApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nextripv2AgenciesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Agency>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nextripv2AgenciesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} routeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nextripv2DirectionsRouteIdGet(routeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Direction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nextripv2DirectionsRouteIdGet(routeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} routeId 
         * @param {number} directionId 
         * @param {string} placeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nextripv2RouteIdDirectionIdPlaceCodeGet(routeId: string, directionId: number, placeCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NexTripResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nextripv2RouteIdDirectionIdPlaceCodeGet(routeId, directionId, placeCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nextripv2RoutesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Route>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nextripv2RoutesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} stopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nextripv2StopIdGet(stopId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NexTripResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nextripv2StopIdGet(stopId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} routeId 
         * @param {number} directionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nextripv2StopsRouteIdDirectionIdGet(routeId: string, directionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Place>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nextripv2StopsRouteIdDirectionIdGet(routeId, directionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} routeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nextripv2VehiclesRouteIdGet(routeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Vehicle>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nextripv2VehiclesRouteIdGet(routeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NexTripApi - factory interface
 * @export
 */
export const NexTripApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NexTripApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2AgenciesGet(options?: any): AxiosPromise<Array<Agency>> {
            return localVarFp.nextripv2AgenciesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} routeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2DirectionsRouteIdGet(routeId: string, options?: any): AxiosPromise<Array<Direction>> {
            return localVarFp.nextripv2DirectionsRouteIdGet(routeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} routeId 
         * @param {number} directionId 
         * @param {string} placeCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2RouteIdDirectionIdPlaceCodeGet(routeId: string, directionId: number, placeCode: string, options?: any): AxiosPromise<NexTripResult> {
            return localVarFp.nextripv2RouteIdDirectionIdPlaceCodeGet(routeId, directionId, placeCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2RoutesGet(options?: any): AxiosPromise<Array<Route>> {
            return localVarFp.nextripv2RoutesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} stopId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2StopIdGet(stopId: number, options?: any): AxiosPromise<NexTripResult> {
            return localVarFp.nextripv2StopIdGet(stopId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} routeId 
         * @param {number} directionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2StopsRouteIdDirectionIdGet(routeId: string, directionId: number, options?: any): AxiosPromise<Array<Place>> {
            return localVarFp.nextripv2StopsRouteIdDirectionIdGet(routeId, directionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} routeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextripv2VehiclesRouteIdGet(routeId: string, options?: any): AxiosPromise<Array<Vehicle>> {
            return localVarFp.nextripv2VehiclesRouteIdGet(routeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NexTripApi - interface
 * @export
 * @interface NexTripApi
 */
export interface NexTripApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApiInterface
     */
    nextripv2AgenciesGet(options?: AxiosRequestConfig): AxiosPromise<Array<Agency>>;

    /**
     * 
     * @param {string} routeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApiInterface
     */
    nextripv2DirectionsRouteIdGet(routeId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Direction>>;

    /**
     * 
     * @param {string} routeId 
     * @param {number} directionId 
     * @param {string} placeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApiInterface
     */
    nextripv2RouteIdDirectionIdPlaceCodeGet(routeId: string, directionId: number, placeCode: string, options?: AxiosRequestConfig): AxiosPromise<NexTripResult>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApiInterface
     */
    nextripv2RoutesGet(options?: AxiosRequestConfig): AxiosPromise<Array<Route>>;

    /**
     * 
     * @param {number} stopId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApiInterface
     */
    nextripv2StopIdGet(stopId: number, options?: AxiosRequestConfig): AxiosPromise<NexTripResult>;

    /**
     * 
     * @param {string} routeId 
     * @param {number} directionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApiInterface
     */
    nextripv2StopsRouteIdDirectionIdGet(routeId: string, directionId: number, options?: AxiosRequestConfig): AxiosPromise<Array<Place>>;

    /**
     * 
     * @param {string} routeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApiInterface
     */
    nextripv2VehiclesRouteIdGet(routeId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Vehicle>>;

}

/**
 * NexTripApi - object-oriented interface
 * @export
 * @class NexTripApi
 * @extends {BaseAPI}
 */
export class NexTripApi extends BaseAPI implements NexTripApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApi
     */
    public nextripv2AgenciesGet(options?: AxiosRequestConfig) {
        return NexTripApiFp(this.configuration).nextripv2AgenciesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} routeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApi
     */
    public nextripv2DirectionsRouteIdGet(routeId: string, options?: AxiosRequestConfig) {
        return NexTripApiFp(this.configuration).nextripv2DirectionsRouteIdGet(routeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} routeId 
     * @param {number} directionId 
     * @param {string} placeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApi
     */
    public nextripv2RouteIdDirectionIdPlaceCodeGet(routeId: string, directionId: number, placeCode: string, options?: AxiosRequestConfig) {
        return NexTripApiFp(this.configuration).nextripv2RouteIdDirectionIdPlaceCodeGet(routeId, directionId, placeCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApi
     */
    public nextripv2RoutesGet(options?: AxiosRequestConfig) {
        return NexTripApiFp(this.configuration).nextripv2RoutesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} stopId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApi
     */
    public nextripv2StopIdGet(stopId: number, options?: AxiosRequestConfig) {
        return NexTripApiFp(this.configuration).nextripv2StopIdGet(stopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} routeId 
     * @param {number} directionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApi
     */
    public nextripv2StopsRouteIdDirectionIdGet(routeId: string, directionId: number, options?: AxiosRequestConfig) {
        return NexTripApiFp(this.configuration).nextripv2StopsRouteIdDirectionIdGet(routeId, directionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} routeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NexTripApi
     */
    public nextripv2VehiclesRouteIdGet(routeId: string, options?: AxiosRequestConfig) {
        return NexTripApiFp(this.configuration).nextripv2VehiclesRouteIdGet(routeId, options).then((request) => request(this.axios, this.basePath));
    }
}


